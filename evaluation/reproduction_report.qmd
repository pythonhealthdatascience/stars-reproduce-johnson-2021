---
title: "Summary report"
subtitle: "For computational reproducibility assessment of Johnson et al. 2021"
format:
  html:
    page-layout: full
echo: False
bibliography: ../quarto_site/references.bib
---

## Study

> Johnson, K.M., Sadatsafavi, M., Adibi, A., Lynd, L., Harrison, M., Tavakoli, H., Sin, D., Bryan, S. **Cost Effectiveness of Case Detection Strategies for the Early Detection of COPD**. *Applied Health Economics and Health Policy* 19, p203-215 (2021). <https://doi.org/10.1007/s40258-020-00616-2>.

This study uses a previously validated discrete-event simulation model, EPIC: Evaluation Platform in chronic obstructive pulmonary disease (COPD). The model is written in `C++` with an `R` interface, using R scripts for execution. The model is adapted to evaluate the cost-effectiveness of 16 COPD case detection strategies in primary care, comparing costs, quality-adjusted life years (QALYs), incremental cost-effectiveness ratios (ICER), and incremental net monetary benefits (INMB) across scenarios. Sensitivity analyses are also conducted.

## Computational reproducibility

Successfully reproduced **4 out of 5 (80%)** of items from the scope in **19h 49m (49.5%)**.

Required troubleshooting:

* **Environment** - identifying required packages, importing archived packages, and local import of the `epicR` package
* **Run time** - troubleshooting with lower agent numbers due to long run times
* **Output files** - saves results to `.csv`
* **Tables and figures** - writing code to produce these, which required figuring out:
  * Which results tables to use
  * Which columns to use
  * Which scenarios to use
  * How to transform the columns
  * How to create features like the efficiency frontier
* **Sensitivity analysis** - identifying parameters to change and creating scripts

::: {.panel-tabset}

## Table 3

Cannot display original figure as do not have permission for reuse, but can view at @johnson_cost_2021

Reproduction:

```{python}
import pandas as pd

pd.read_csv('../reproduction/outputs/tab3.csv')
```

## Figure 3

Cannot display original figure as do not have permission for reuse, but can view at @johnson_cost_2021

Reproduction:

![](../reproduction/outputs/fig3-1.png){.lightbox}

## Figure 4

Cannot display original figure as do not have permission for reuse, but can view at @johnson_cost_2021

Reproduction:

![](../reproduction/outputs/fig4-1.png){.lightbox}

## Appendix 6

Cannot display original figure as do not have permission for reuse, but can view at @johnson_cost_2021

Reproduction:

![](../reproduction/outputs/appendix6-1.png){.lightbox}

## Appendix 7

Cannot display original figure as do not have permission for reuse, but can view at @johnson_cost_2021

Reproduction:

![](../reproduction/outputs/appendix7-1.png){.lightbox}

:::

## Evaluation against guidelines

```{python}
import pandas as pd
import plotly.express as px

# Create dataframe of results
col = ['fully', 'partially', 'not', 'na']
eval_dict = {
  'STARS (essential)': [4, 2, 2, 0],
  'STARS (optional)': [0, 0, 5, 0],
  'Badges (criteria)': [4, 0, 8, 0],
  'Badges (badges)': [3, 0, 9, 0],
  'STRESS-DES': [16, 1, 2, 5],
  'ISPOR-SDM': [15, 0, 2, 1]
}
eval_wide = pd.DataFrame(eval_dict, index=col).T
eval = (eval_wide
        .melt(ignore_index=False)
        .reset_index()
        .rename(columns={'index': 'guideline',
                         'variable': 'result',
                         'value': 'count'}))

# Add percentages
eval['total'] = eval['count'].groupby(eval['guideline']).transform('sum')
eval['percent'] = eval['count'] / eval['total']
eval['percentage'] = round(eval['percent']*100, 1).astype(str) + '%'

# Create stacked bar visualisation
fig = px.bar(
  eval,
  x='percent',
  y='guideline',
  color='result',
  color_discrete_map={'fully': '#06a94d',
                      'partially': '#ffd68c',
                      'not': '#ff9999',
                      'na': '#d1dcea'},
  orientation='h',
  hover_data={
    'count': True,
    'percent': False,
    'percentage': True,
    'guideline': False,
    'result': False})
  
# Amend x axis label and ticks
fig.update_layout(xaxis = dict(
  range=[0,1],
  tickmode='array',
  tickvals=[0, 0.2, 0.4, 0.6, 0.8, 1],
  ticktext=['0%', '20%', '40%', '60%', '80%', '100%'],
  title=''))

# Amend y axis label and order, and add space between ticks and plot
fig.update_layout(yaxis=dict(
  autorange='reversed',
  title=''))
fig.update_yaxes(ticksuffix = '  ')

# Relabel legend
fig.update_layout(legend_title_text='Result')
newnames = {'fully': 'Fully met', 'partially': 'Partially met',
            'not': 'Not met', 'na': 'Not applicable'}
fig.for_each_trace(lambda t: t.update(name = newnames[t.name]))

# Show without toolbar
fig.show(config={'displayModeBar': False})
```

<sup>Context: The original study repository was evaluated against criteria from journal badges relating to how open and reproducible the model is and against guidance for sharing artefacts from the STARS framework. The original study article and supplementary materials (excluding code) were evaluated against reporting guidelines for DES models: STRESS-DES, and guidelines adapted from ISPOR-SDM.</sup>
